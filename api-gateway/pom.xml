<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.lopez.rafael</groupId>
	<artifactId>api-gateway</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>api-gateway</name>
	<description>Spring Cloud API Gateway Demo</description>
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2020.0.3</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<!-- Whenever we are talking about microservices and tracing, you'd want to be able to trace the request
        	 across multiple microservices. And to be able to do that, each request should be assigned a unique Id.
             Sleuth is one of the frameworks which actually assigns a unique Id to each request. And as the request
             goes across multiple microservices, the Id is maintained and the information is sent out to the tracing
             server using that specific Id. And this allows us to trace the request across multiple microservices. -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<!-- https://spring.io/projects/spring-cloud-sleuth -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
		</dependency>
		<!-- Distributed Tracing (Asynchronous) -->
		<!-- Right now, what we are trying to do is actually directly connect to distributed tracing server over
 			 HTTP. So, API Gateway, Currency Conversion services, Currency Exchange service, all of these would
 			 be sending the information out to the Distributed Tracing Server using HTTP calls. And the distributed tracing
			 server would be storing it to an in-memory database and be providing a UI around it.
			 However, consider a scenario when the Distributed Tracing Server is down. What would happen?
			 The information from these microservices is lost. And to prevent that from happening, what we can do is,
			 we can have a queue in between. We can have a queue like Rabbit MQ in between. All the microservices can
			 send the information out to the Rabbit MQ queue and the Distributor Tracing Server can be picking up
			 the information from the Rabbit MQ. This would ensure that even if the Distributor Tracing Server is down,
			 the microservices can keep sending messages to Rabbit MQ. And when the Distributor Tracing Server is up,
			 it can pick up the messages from the queue. This is the recommended architecture. -->
		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<image>
						<name>rafaellopez/${project.artifactId}:${project.version}</name>
					</image>
					<pullPolicy>IF_NOT_PRESENT</pullPolicy>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
